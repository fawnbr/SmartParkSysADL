Model newElement ; Requirement GerenciarEstacionamento ( 1 ) { text = "\"O sistema deve gerir todos os recursos utilizados pelo estacionamento.\"" Requirement GerenciarUsuarios ( 1.1 ) { text = "\"O sistema deve ser capaz de gerenciar usuários do sistema.\"" } Requirement GerenciarEntradaESaida ( 1.2 ) { text = "\"O sistema deve controlar o acesso de entrada e saída a partir da leitura da placa do veículo.\"" } Requirement GerenciarPagamento ( 1.3 ) { text = "\"O sistema deve fornecer mecanismos de precificar a permanência no estacionamento e mecanismos para efetuar o pagamento.\"" } Requirement GerenciarVagasLivres ( 1.4 ) { text = "\"O sistema deve conseguir gerenciar as vagas livres e ocupadas.\"" } } Requirement GerenciarFuncionarios ( 1.1.1 ) { text = "\"O sistema deve gerenciar funcionários e controlar acesso a partir de seus respectivos perfis.\"" derive GerenciarEstacionamento.GerenciarUsuarios ; } Requirement GerenciarMotoristas ( 1.1.2 ) { text = "\"O sistema deve gerenciar motoristas e controlar acesso a partir de seus respectivos perfis.\"" derive GerenciarEstacionamento.GerenciarUsuarios ; } Requirement LiberarEntrada ( 1.2.1 ) { text = "\"O sistema deve abrir a cancela automaticamente após leitura da placa do veículo.\"" satisfied by Componentes.CancelaCP ; derive GerenciarEstacionamento.GerenciarEntradaESaida ; } Requirement LiberarSaida ( 1.2.2 ) { text = "\"O sistema deve abrir a cancela automaticamente após ler a placa do veículo e confirmar pagamento.\"" satisfied by Componentes.CancelaCP ; derive GerenciarEstacionamento.GerenciarEntradaESaida ; } Requirement EfetuarPagamento ( 1.3.1 ) { text = "\"O sistema deve fornecer mecanismos para efetuar o pagamento.\"" satisfied by Componentes.FonteDePagamentoCP ; derive GerenciarEstacionamento.GerenciarPagamento ; } Requirement PrecificarPermanencia ( 1.3.2 ) { text = "\"O sistema deve permitir precificar a permanência no estacionamento.\"" derive GerenciarEstacionamento.GerenciarPagamento ; } Requirement Escalabilidade ( 2 ) { text = "\"O sistema deve possuir flexibilidade para ser possível escalar o sistema.\"" } Requirement Disponibilidade ( 3 ) { text = "\"O sistema deve permitir múltiplos meios de realizar uma mesma atividade para manter-se disponível.\"" } package Componentes { import Conectores ; import Portas ; boundary
	component def CancelaCP { ports : comandoEntrada : CancelaIPT ; } boundary
	component def CameraCP { ports : foto : CameraOPT ; } boundary
	component def FonteDePagamentoCP { ports : pagamentoSaida : PagamentoOPT ; precoASerPago : PrecoIPT ; } boundary
	component def SensorDePresencaCP { ports :  valorSensor : SensorPresencaOPT ; } boundary
	component def DisplayLedCP { ports : vagasDisponiveis : VagasIPT ; } component def SistemaCentralCP {  configuration { components :           CameraCP : CameraCP [ 1 , 10 ] { using ports : foto : CameraOPT ; }  CancelaCP : CancelaCP [ 1 , 10 ] { using ports : comandoEntrada : CancelaIPT ; }  IdentificadorDePlacaCP : IdentificadorDePlacaCP { using ports : fotoEntrada : CameraIPT ; placaSaida : PlacaOPT ; } ControladorDeCameraCP : ControladorDeCameraCP { using ports : fotoEntradaControlador : CameraIPT ; acessoSaida : AcessoOPT ; fotoSaidaControlador : CameraOPT ; placaEntrada : PlacaIPT ; } ControladorDePermanenciaCP : ControladorDePermanenciaCP { using ports : permanenciaEntrada : PermanenciaIPT [ 1 , 2 ] ; precoSaida : PrecoOPT ; } ControladorDePagamentosCP : ControladorDePagamentosCP [ 1 , 2 ] { using ports : veiculoConsultado : IdentificadorIPT ; veiculoLiberadoSaida : LiberacaoOPT ; pagamentoEntrada : PagamentoIPT ; fimPermanenciaSaida : PermanenciaOPT ; precoAPagar : PrecoIPT ; precoParaTerminalDePagamento : PrecoOPT ; } FonteDePagamentoCP : FonteDePagamentoCP { using ports : pagamentoSaida : PagamentoOPT ; precoASerPago : PrecoIPT ; } GerenciadorDeVagasCP : GerenciadorDeVagasCP { using ports : capacidadeDoEstacionamento : VagasIPT ; valorSensores : SensorPresencaIPT ; vagasAtuaisDisponiveis : VagasOPT ; } SensorDePresencaCP : SensorDePresencaCP [ 1 , 10 ] { using ports : valorSensor : SensorPresencaOPT ; } DisplayLedCP : DisplayLedCP [ 1 , 10 ] { using ports : vagasDisponiveis : VagasIPT ; }  SmartParkICP : SmartParkICP [ 1 , 10 ] { using ports : comandoManualSaida : CancelaOPT ; acessoManual : AcessoOPT ; veiculoLiberadoManual : LiberacaoIPT ; } ControladorCentralCP : ControladorCentralCP { using ports : acessoEntrada : AcessoIPT ; comandoSaida : CancelaOPT ; inicioPermanenciaSaida : PermanenciaOPT ; veiculoComPagamentoAValidar : IdentificadorOPT ; veiculoLiberadoEntrada : LiberacaoIPT ; vagasDoEstacionamento : VagasOPT ; liberacaoManualSaida : LiberacaoOPT ; } connectors : fotoVeiculo : CameraCN bindings foto = fotoEntradaControlador ; fotoAIdentificar : CameraCN bindings fotoSaidaControlador = fotoEntrada ; placaIdentificada : PlacaCN bindings placaSaida = placaEntrada ;    atividadeDosSensores : PresencaCN bindings valorSensor = valorSensores ; numeroDeVagas : VagasCN bindings vagasAtuaisDisponiveis = vagasDisponiveis ;   precoPendenteDePagamento : PrecoCN bindings precoParaTerminalDePagamento = precoASerPago ; solicitacaoPagamento : PagamentoCN bindings pagamentoSaida = pagamentoEntrada ;  fimPermanencia : PermanenciaCN bindings fimPermanenciaSaida = permanenciaEntrada ; preco : PrecoCN bindings precoSaida = precoAPagar ; comandoManualCancela : CancelaCN bindings comandoManualSaida = comandoEntrada ; acesso : AcessoCN bindings acessoSaida = acessoEntrada ; veiculoAConsultar : IdentificadorCN bindings veiculoComPagamentoAValidar = veiculoConsultado ; liberado : LiberacaoCN bindings veiculoLiberadoSaida = veiculoLiberadoEntrada ; quantidadeDeVagas : VagasCN bindings vagasDoEstacionamento = capacidadeDoEstacionamento ; acessoManual : AcessoCN bindings acessoManual = acessoEntrada ; liberacaoManual : LiberacaoCN bindings liberacaoManualSaida = veiculoLiberadoManual ; inicioPermanencia : PermanenciaCN bindings inicioPermanenciaSaida = permanenciaEntrada ; } }
	component def ControladorDePagamentosCP { ports : identificadorConsultado : IdentificadorIPT ; veiculoLiberadoSaida : LiberacaoOPT ; pagamentoEntrada : PagamentoIPT ; fimPermanenciaSaida : PermanenciaOPT ; precoAPagar : PrecoIPT ; precoParaTerminalDePagamento : PrecoOPT ; }
	component def GerenciadorDeVagasCP { ports :  capacidadeDoEstacionamento : VagasIPT ; valorSensores : SensorPresencaIPT [ 1 , 10 ] ; vagasAtuaisDisponiveis : VagasOPT ; }
	component def IdentificadorDePlacaCP { ports : fotoEntrada : CameraIPT ; placaSaida : PlacaOPT ; }
	component def ControladorCentralCP { ports : acessoEntrada : AcessoIPT [ 1 , 2 ] ; comandoSaida : CancelaOPT ; inicioPermanenciaSaida : PermanenciaOPT ; validarPagamentoVeiculo : IdentificadorOPT ; veiculoLiberadoEntrada : LiberacaoIPT ; vagasDoEstacionamento : VagasOPT ; liberacaoManualSaida : LiberacaoOPT ; }
	component def ControladorDeCameraCP { ports : fotoEntradaControlador : CameraIPT ; acessoSaida : AcessoOPT ; fotoSaidaControlador : CameraOPT ; placaEntrada : PlacaIPT ; }
	component def ControladorDePermanenciaCP { ports : permanenciaEntrada : PermanenciaIPT [ 1 , 2 ] ; precoSaida : PrecoOPT ; } component def SmartParkICP { ports : comandoManualSaida : CancelaOPT ; acessoManual : AcessoOPT ; veiculoLiberadoManual : LiberacaoIPT ; } } package Portas { import Tipos ;   port def CameraOPT { flow out String }  port def CancelaIPT { flow in Comandos } port def CameraIPT { flow in String } port def AcessoOPT { flow out Acesso } port def PlacaOPT { flow out String } port def AcessoIPT { flow in Acesso } port def CancelaOPT { flow in Comandos } port def PermanenciaIPT { flow in Permanencia } port def PermanenciaOPT { flow out Permanencia } port def PlacaIPT { flow in String } port def LiberacaoOPT { flow out Boolean } port def LiberacaoIPT { flow in Boolean } port def PagamentoIPT { flow in Pagamento } port def PagamentoOPT { flow out Pagamento } port def PrecoIPT { flow in Double } port def PrecoOPT { flow out Double } port def VagasIPT { flow in Integer } port def VagasOPT { flow out Integer } port def SensorPresencaIPT { flow in Boolean } port def SensorPresencaOPT { flow out Boolean } port def IdentificadorIPT { flow in String } port def IdentificadorOPT { flow out String } } package Conectores { import Portas ;  connector def CameraCN { participants : ~ entradaFoto : CameraOPT ; ~ saidaFoto : CameraIPT ; flows : String from entradaFoto to saidaFoto } connector def AcessoCN { participants : ~ acessoEntrada : AcessoOPT ; ~ acessoSaida : AcessoIPT ; flows : Acesso from acessoEntrada to acessoSaida } connector def PlacaCN { participants : ~ placaEntrada : PlacaOPT ; ~ placaSaida : PlacaIPT ; flows : String from placaEntrada to placaSaida } connector def PagamentoCN { participants : ~ pagamentoEntrada : PagamentoOPT ; ~ pagamentoSaida : PagamentoIPT ; flows : Pagamento from pagamentoEntrada to pagamentoSaida } connector def LiberacaoCN { participants : ~ liberacaoEntrada : LiberacaoOPT ; ~ liberacaoSaida : LiberacaoIPT ; flows : Boolean from liberacaoEntrada to liberacaoSaida } connector def PermanenciaCN { participants : ~ permanenciaEntrada : PermanenciaOPT ; ~ permanenciaSaida : PermanenciaIPT ; flows : Permanencia from permanenciaEntrada to permanenciaSaida } connector def CancelaCN { participants : ~ comandoCancelaEntrada : CancelaOPT ; ~ comandoCancelaSaida : CancelaIPT ; flows : Comandos from comandoCancelaEntrada to comandoCancelaSaida } connector def PrecoCN { participants : ~ precoEntrada : PrecoOPT ; ~ precoSaida : PrecoIPT ; flows : Double from precoEntrada to precoSaida } connector def VagasCN { participants : ~ vagasTotaisEntrada : VagasOPT ; ~ vagasTotaisSaida : VagasIPT ; flows : Integer from vagasTotaisEntrada to vagasTotaisSaida } connector def PresencaCN { participants : ~ sensorEntrada : SensorPresencaOPT ; ~ sensorSaida : SensorPresencaIPT ; flows : Boolean from sensorEntrada to sensorSaida } connector def IdentificadorCN { participants : ~ identificadorEntrada : IdentificadorOPT ; ~ identificadorSaida : IdentificadorIPT ; flows : String from identificadorEntrada to identificadorSaida } } package Tipos {   value type String { } value type Boolean { } value type Integer { } datatype Comandos { attributes : cancela : ComandoCancela ; } enum ComandoCancela { Abrir , Fechar } datatype Acesso { attributes : identificador : String ; entrada : Boolean ; } datatype Permanencia { attributes : identificador : String ; inicio : Boolean ; } datatype Pagamento { attributes : identificador : String ; opcaoPagamento : Integer ; } value type Double { } } Requirement VisualizarVagasLivres ( 1.4.1 ) { text = "\"O sistema deve possuir mecanismos de visualizar as vagas livres.\"" satisfied by Componentes.DisplayLedCP ; derive GerenciarEstacionamento.GerenciarVagasLivres ; } Requirement PerceberOcupacaoVagas ( 1.4.2 ) { text = "\"O sistema deve possuir sensores que percebam se uma vaga está ocupada ou não.\"" satisfied by Componentes.SensorDePresencaCP ; derive GerenciarEstacionamento.GerenciarVagasLivres ; }