Model newElement ; Requirement GerenciarEstacionamento ( 1 ) { text = "\"O sistema deve gerir todos os recursos utilizados pelo estacionamento.\"" Requirement GerenciarUsuarios ( 1.1 ) { text = "\"O sistema deve ser capaz de gerenciar usuários do sistema.\"" } Requirement GerenciarEntradaESaida ( 1.2 ) { text = "\"O sistema deve controlar o acesso de entrada e saída a partir da leitura da placa do veículo.\"" } Requirement GerenciarPagamento ( 1.3 ) { text = "\"O sistema deve fornecer mecanismos de precificar a permanência no estacionamento e mecanismos para efetuar o pagamento.\"" } Requirement GerenciarVagasLivres ( 1.4 ) { text = "\"O sistema deve conseguir gerenciar as vagas livres e ocupadas.\"" satisfied by ComponentesDeSoftware.GerenciadorDeVagas ; } } Requirement GerenciarFuncionarios ( 1.1.1 ) { text = "\"O sistema deve gerenciar funcionários e controlar acesso a partir de seus respectivos perfis.\"" satisfied by ComponentesDeSoftware.ControladorCentral ; derive GerenciarEstacionamento.GerenciarUsuarios ; } Requirement GerenciarMotoristas ( 1.1.2 ) { text = "\"O sistema deve gerenciar motoristas e controlar acesso a partir de seus respectivos perfis.\"" satisfied by ComponentesDeSoftware.ControladorCentral ; derive GerenciarEstacionamento.GerenciarUsuarios ; } Requirement LiberarEntrada ( 1.2.1 ) { text = "\"O sistema deve abrir a cancela automaticamente após leitura da placa do veículo.\"" satisfied by ComponentesFisicos.Cancela , ComponentesDeSoftware.ReconhecedorDePlacas ; derive GerenciarEstacionamento.GerenciarEntradaESaida ; } Requirement LiberarSaida ( 1.2.2 ) { text = "\"O sistema deve abrir a cancela automaticamente após ler a placa do veículo e confirmar pagamento.\"" satisfied by ComponentesFisicos.Cancela , ComponentesDeSoftware.ReconhecedorDePlacas ; derive GerenciarEstacionamento.GerenciarEntradaESaida ; } Requirement EfetuarPagamento ( 1.3.1 ) { text = "\"O sistema deve fornecer mecanismos para efetuar o pagamento.\"" satisfied by ComponentesFisicos.TerminalDePagamento , ComponentesDeSoftware.ControladorDePagamentos ; derive GerenciarEstacionamento.GerenciarPagamento ; } Requirement PrecificarPermanencia ( 1.3.2 ) { text = "\"O sistema deve permitir precificar a permanência no estacionamento.\"" derive GerenciarEstacionamento.GerenciarPagamento ; } Requirement Escalabilidade ( 2 ) { text = "\"O sistema deve possuir flexibilidade para ser possível escalar o sistema.\"" } Requirement Disponibilidade ( 3 ) { text = "\"O sistema deve permitir múltiplos meios de realizar uma mesma atividade para manter-se disponível.\"" } package ComponentesFisicos { import Conectores ; import Portas ; boundary
	component def Cancela { }
	component def CameraDeEntrada { }
	component def CameraDeSaida { }
	component def TerminalDePagamento { }
	component def SensorDePresenca { }
	component def DisplayLED { } } package ComponentesDeSoftware { import Conectores ; import Portas ;
	component def ControladorCentral { }
	component def ReconhecedorDePlacas { }
	component def GerenciadorDeVagas { }
	component def ControladorDePagamentos { } } Requirement VisualizarVagasLivres ( 1.4.1 ) { text = "\"O sistema deve possuir mecanismos de visualizar as vagas livres.\"" satisfied by ComponentesFisicos.DisplayLED ; derive GerenciarEstacionamento.GerenciarVagasLivres ; } Requirement PerceberOcupacaoVagas ( 1.4.2 ) { text = "\"O sistema deve possuir sensores que percebam se uma vaga está ocupada ou não.\"" satisfied by ComponentesFisicos.SensorDePresenca ; derive GerenciarEstacionamento.GerenciarVagasLivres ; } package Portas { import Tipos ; port def SensorAtivo { flow out Ocupado } } package Conectores { import Portas ; } package Tipos { value type Ocupado { unit = Booleano } unit Booleano datatype newElement { } }